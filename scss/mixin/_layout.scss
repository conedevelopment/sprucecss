@use 'sass:meta';
@use '../function' as *;
@use '../variable' as *;

// Create Center layout
@mixin layout-center(
  $gap: spacer(m),
  $max-width: $container-width
) {
  margin-inline: auto;
  max-width: $max-width;
  padding-inline: $gap;
}

// Create Stack layout
@mixin layout-stack(
  $gap: spacer(m),
  $width: true,
  $align: none,
  $important: false,
  $split: 0
) {
  @if $align == left or $align == right {
    display: flex;
    flex-direction: column;
  }

  @if $align == left {
    align-items: start;
  }

  @if $align == right {
    align-items: end;
  }

  > * {
    margin-block-end: 0;
    margin-block-start: 0;

    @if $width and $align == none {
      width: 100%;
    }
  }

  > * + * {
    @if $important == true {
      margin-block-start: $gap !important;
    } @else {
      margin-block-start: $gap;
    }
  }

  @if meta.type-of($split) == number and $split > 0 {
    &:only-child {
      height: 100%;
    }

    > :nth-child(#{$split}) {
      margin-block-end: auto;
    }
  }

  @if meta.type-of($split) != number and $split < 1 {
    @warn 'The second parameter (split) must be a positive number.';
  }
}

// Create Grid layout
@mixin layout-grid(
  $gap: spacer(m),
  $minimum: 12.5rem
) {
  display: grid;
  grid-gap: $gap;

  @supports (width: min(#{$minimum}, 100%)) {
    & {
      grid-template-columns: repeat(auto-fit, minmax(min(#{$minimum}, 100%), 1fr));
    }
  }
}

// Create Sidebar Layout
@mixin layout-sidebar(
  $gap: spacer(m),
  $sidebar-width: 18.75rem
) {
  display: flex;
  flex-wrap: wrap;
  gap: $gap;

  & > :first-child {
    flex-basis: $sidebar-width;
    flex-grow: 1;
  }

  & > :last-child {
    flex-basis: 0;
    flex-grow: 999;
    min-width: 50%;
  }
}

// Create instinctive flex layout.
@mixin layout-flex(
  $gap: spacer(m),
  $width-variable: --col-width
) {
  display: flex;
  flex-wrap: wrap;
  gap: $gap;

  > * {
    flex: 1 1 var(#{$width-variable});
  }
}
