@use 'sass:map';
@use '../function' as *;
@use '../mixin' as *;
@use '../config' as *;

@mixin generate-form-control(
  $selector,
  $has-states: false,
  $has-sizes: false,
  $has-select: true
) {
  #{$selector} {
    appearance: none;
    background-color: color(background, form);
    border: $form-control-border-width solid color(border, form);
    border-radius: $form-control-border-radius;
    box-sizing: border-box;
    color: color(text, form);
    display: block;
    font-size: $form-control-font-size;
    font-weight: $form-control-font-weight;
    line-height: $form-control-line-height;
    padding: $form-control-padding;
    transition-duration: transition(duration);
    transition-property: border, box-shadow;
    transition-timing-function: transition(timing-function);
    width: 100%;

    &::placeholder {
      color: color(placeholder, form);
    };

    &:focus {
      @include field-focus(
        $border: color(border-focus, form),
        $box-shadow: color(shadow-focus, form)
      );
    }

    &[type='color'] {
      height: $form-control-color-height;
      padding: $form-control-color-padding;

      &::-webkit-color-swatch-wrapper {
        padding: 0;
      }

      &::-moz-color-swatch {
        border: 0;
        border-radius: $form-control-border-radius;
      }

      &::-webkit-color-swatch {
        border: 0;
        border-radius: $form-control-border-radius;
      }
    }

    &[disabled],
    &[disabled='true'] {
      @include field-disabled(
        $background: color(background-disabled, form),
        $border: color(border-disabled, form)
      );
    }

    // Set height to textarea
    @at-root {
      textarea#{$selector} {
        height: $form-control-textarea-height;
      }
    }

    // Validation states
    @if ($has-states) {
      &--valid,
      &--invalid {
        background-position: center right $select-icon-right-offset;
        background-repeat: no-repeat;
        background-size: $select-icon-width auto;
        padding-inline-end: $select-padding-right;

        html[dir='rtl'] & {
          background-position: center left $select-icon-right-offset;
        }
      }

      &--valid {
        @include field-icon($form-valid-icon, map.get($colors, alert, success));
        border-color: color(success, alert);

        &:focus {
          @include field-focus(
            $border: color(valid, form),
            $box-shadow: color(valid-shadow, form)
          );
        }
      }

      &--invalid {
        @include field-icon($form-invalid-icon, map.get($colors, alert, danger));
        border-color: color(danger, alert);

        &:focus {
          @include field-focus(
            $border: color(invalid, form),
            $box-shadow: color(invalid-shadow, form)
          );
        }
      }
    }

    // Sizes
    @if ($has-sizes) {
      &--sm {
        font-size: $form-control-font-size-sm;
        padding: $form-control-padding-sm;

        &[type='color'] {
          height: $form-control-color-height-sm;
          padding: $form-control-color-padding-sm;
        }
      }

      &--lg {
        font-size: $form-control-font-size-lg;
        padding: $form-control-padding-lg;

        &[type='color'] {
          height: $form-control-color-height-lg;
          padding: $form-control-color-padding-lg;
        }
      }
    }
  }

  // Generate select styling
  @if ($has-select) {
    select#{$selector} {
      &:not([multiple]):not([size]) {
        @include field-icon($select-icon, map.get($colors, form, select-foreground));
        background-position: center right $select-icon-right-offset;
        background-repeat: no-repeat;
        background-size: $select-icon-width auto;
        padding-inline-end: $select-padding-right;

        html[dir='rtl'] & {
          background-position: center left $select-icon-right-offset;
        }
      }
    }
  }
}
