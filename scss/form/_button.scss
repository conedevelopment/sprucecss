@use 'sass:map';
@use '../function' as *;
@use '../mixin' as *;
@use '../config' as *;

@mixin styles {
  @if map.get($settings, 'css-custom-properties') {
    @each $key, $value in $btn {
      --#{$internal-prefix}#{$key}: #{$value};
    }
  }
}

@mixin styles-lg {
  @if map.get($settings, 'css-custom-properties') {
    @each $key, $value in $btn-lg {
      --#{$internal-prefix}#{$key}: #{$value};
    }
  }
}

@mixin styles-sm {
  @if map.get($settings, 'css-custom-properties') {
    @each $key, $value in $btn-sm {
      --#{$internal-prefix}#{$key}: #{$value};
    }
  }
}

@mixin generate-btn(
  $selector,
  $pseudo-selector: null,
  $has-icons: true,
  $has-sizes: true,
) {
  #{$selector}#{$pseudo-selector} {
    @include styles;

    align-items: center;
    border-radius: config('border-radius', $btn);
    border-style: solid;
    border-width: map.get($btn, outline-width);
    cursor: pointer;
    display: inline-flex;
    font-family: map.get($btn, font-family);
    font-size: config('font-size', $btn);
    font-style: map.get($btn, font-style);
    font-weight: map.get($btn, font-weight);
    gap: map.get($btn, gap);
    justify-content: center;
    line-height: 1;
    padding: config('padding', $btn);
    text-align: start;
    text-decoration: none;
    text-transform: map.get($btn, text-transform);
    transition-duration: transition(duration);
    transition-property: background-color,border-color, box-shadow, color;
    transition-timing-function: transition(timing-function);
  }

  #{$selector}:focus {
    outline-color: transparent;
    outline-style: solid;
  }

  #{$selector}:disabled,
  #{$selector}--disabled {
    opacity: 0.5;
    pointer-events: none;
  }

  @if ($has-icons) {
    // Icon button
    #{$selector}--icon {
      padding: map.get($btn, icon-padding);

      &#{$selector}--sm {
        padding: map.get($btn, icon-padding-sm);
      }

      &#{$selector}--lg {
        padding: config(icon-padding, $btn);
      }
    }

    // Icons
    #{$selector}__icon {
      flex-shrink: 0;
      height: map.get($btn, icon-size);
      width: map.get($btn, icon-size);

      &--sm {
        height: map.get($btn, icon-size-sm);
        width: map.get($btn, icon-size-sm);
      }
    }
  }

  @if ($has-sizes) {
    // Sizes
    #{$selector}--sm#{$pseudo-selector} {
      font-size: map.get($btn, font-size-sm);
      gap: map.get($btn, gap-sm);
      padding: map.get($btn, padding-sm);
    }

    #{$selector}--lg#{$pseudo-selector} {
      @include styles-lg;

      @if not map.get($settings, 'css-custom-properties') {
        gap: config(gap, $btn-lg);
        padding: config(padding, $btn-lg);

        @include breakpoint(md) {
          font-size: config(font-size, $btn-lg);
        }
      }
    }

    // Display types
    #{$selector}--block#{$pseudo-selector} {
      width: 100%;
    }
  }
}
