@use '../config' as *;
@use '../function' as *;

@mixin generate-table(
  $selector: '.table',
  $has-variations: true,
  $has-responsive-table: true
) {
  @if ($has-responsive-table) {
    .table-responsive {
      --min-width: #{$table-responsive-width};
      -webkit-overflow-scrolling: touch;
      overflow-x: auto;

      table {
        min-width: var(--min-width);
      }
    }
  }

  #{$selector} {
    border-collapse: collapse;
    color: color(text, table);
    width: 100%;

    caption {
      color: color(caption, table);
      font-size: $table-caption-font-size;
      font-style: $table-caption-font-style;
      font-weight: $table-caption-font-weight;
      margin-block-end: spacer(s);
    }

    th,
    td {
      border-block-end: 1px solid color(border, table);
      line-height: $table-line-height;
      padding: $table-padding;
    }

    th {
      color: color(heading, table);
      text-align: inherit;
      text-align: -webkit-match-parent;
    }

    @if ($has-variations) {
      &--striped {
        > tbody > tr:nth-child(#{$table-stripe}) {
          background-color: color(stripe, table);
        }
      }

      &--hover {
        > tbody > tr:hover {
          background: color(hover, table);
        }
      }

      &--clear-border {
        th,
        td {
          border: 0;
        }
      }

      &--in-line {
        th:first-child,
        td:first-child {
          padding-inline-start: 0;
        }

        th:last-child,
        td:last-child {
          padding-inline-end: 0;
        }
      }

      &--sm {
        th,
        td {
          padding: $table-padding-sm;
        }
      }

      &--rounded {
        th,
        td {
          &:first-child {
            border-end-start-radius: $border-radius-sm;
            border-start-start-radius: $border-radius-sm;
          }

          &:last-child {
            border-end-end-radius: $border-radius-sm;
            border-start-end-radius: $border-radius-sm;
          }
        }
      }
    }
  }
}
